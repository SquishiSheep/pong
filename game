import pygame
import random

# Initialize Pygame
pygame.init()

# Screen dimensions
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))

# Colors
white = (255, 255, 255)
black = (0, 0, 0)
red = (255, 0, 0)

# Paddle dimensions
paddle_width = 10
paddle_height = 100
player_x = screen_width - 20
player_y = screen_height // 2 - paddle_height // 2
bot_x = 10
bot_y = screen_height // 2 - paddle_height // 2

# Ball dimensions
ball_size = 20
ball_x = screen_width // 2
ball_y = screen_height // 2
ball_dx = 5
ball_dy = 5

# Box dimensions
box_size = 20
boxes = []

# Score
player_score = 0
bot_score = 0

# Font
font = pygame.font.Font(None, 74)

# Clock
clock = pygame.time.Clock()

# Function to create a new box
def create_box():
    x = random.randint(0, screen_width - box_size)
    y = random.randint(0, screen_height - box_size)
    boxes.append(pygame.Rect(x, y, box_size, box_size))

# Create initial boxes
create_box()

# Main game loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Move player paddle
    keys = pygame.key.get_pressed()
    if keys[pygame.K_UP] and player_y > 0:
        player_y -= 5
    if keys[pygame.K_DOWN] and player_y < screen_height - paddle_height:
        player_y += 5

    # Move bot paddle
    if bot_y + paddle_height / 2 < ball_y:
        bot_y += 3  # Slower bot speed
    elif bot_y + paddle_height / 2 > ball_y:
        bot_y -= 3  # Slower bot speed

    # Move ball
    ball_x += ball_dx
    ball_y += ball_dy

    # Ball collision with top and bottom
    if ball_y <= 0 or ball_y >= screen_height - ball_size:
        ball_dy *= -1

    # Ball collision with paddles
    if (ball_x >= player_x - ball_size and player_y <= ball_y <= player_y + paddle_height) or (
            ball_x <= bot_x + paddle_width and bot_y <= ball_y <= bot_y + paddle_height):
        ball_dx *= -1

    # Ball goes out of bounds
    if ball_x <= 0:
        player_score += 1
        ball_x = screen_width // 2
        ball_y = screen_height // 2
        ball_dx *= random.choice([-1, 1])
        ball_dy *= random.choice([-1, 1])
    if ball_x >= screen_width - ball_size:
        bot_score += 1
        ball_x = screen_width // 2
        ball_y = screen_height // 2
        ball_dx *= random.choice([-1, 1])
        ball_dy *= random.choice([-1, 1])

    # Ball collision with boxes
    for box in boxes[:]:
        if box.colliderect(pygame.Rect(ball_x, ball_y, ball_size, ball_size)):
            boxes.remove(box)
            ball_dx *= -1
            ball_dy *= -1

    # Drawing
    screen.fill(black)
    pygame.draw.rect(screen, white, (player_x, player_y, paddle_width, paddle_height))
    pygame.draw.rect(screen, white, (bot_x, bot_y, paddle_width, paddle_height))
    pygame.draw.ellipse(screen, white, (ball_x, ball_y, ball_size, ball_size))

    # Draw boxes
    for box in boxes:
        pygame.draw.rect(screen, red, box)

    # Draw scores
    player_text = font.render(str(player_score), True, white)
    bot_text = font.render(str(bot_score), True, white)
    screen.blit(player_text, (screen_width // 2 + 20, 10))
    screen.blit(bot_text, (screen_width // 2 - 60, 10))

    # Update display
    pygame.display.flip()
    clock.tick(60)

    # Occasionally create new boxes
    if random.randint(0, 1000) < 2:  # Very rare chance to create a new box
        create_box()

# Quit Pygame
pygame.quit()
